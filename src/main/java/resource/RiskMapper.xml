<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >

<mapper namespace="project5.risk.RiskDao">
 
	<!-- 총 게시물 조회 -->
	<select id="totCnt" resultType="int" parameterType="riskSch">
		SELECT COUNT(*)
		FROM (
		SELECT ROW_NUMBER() OVER (ORDER BY r.RISKKEY  desc ) AS cnt, r.RISKKEY AS RISKKEY , r.TITLE AS title, p.NAME AS prjname, TO_CHAR(r.WRITEDATE,'YYYY-MM-DD') AS writedates,
		TO_CHAR(r.COMDATE,'YYYY-MM-DD') AS comdate,r.IMPORTANCE AS IMPORTANCE , r.PROGRESS AS PROGRESS , m.NAME AS name
		FROM RISK r , MEMBER m, PROJECT p  
		WHERE r.MEMBERKEY = m.MEMBERKEY 
		AND r.PROJECTKEY = p.PROJECTKEY
		AND p.PROJECTKEY = #{schprjkey}
		order by cnt asc )
		where 1=1
		<if test = "sch!=null and sch!=''">
		AND title LIKE '%'||#{sch}||'%'
		OR name LIKE '%'||#{sch}||'%'
		OR PROGRESS LIKE '%'||#{sch}||'%'
		OR IMPORTANCE LIKE '%'||#{sch}||'%'
		OR prjname LIKE '%'||#{sch}||'%'
		OR writedates LIKE '%'||#{sch}||'%'
		OR comdate LIKE '%'||#{sch}||'%'
		</if>
	</select>
	
	<!-- 프로젝트별 게시물 조회 -->
	<select id="totprjCnt" resultType="int" parameterType="riskSch">
		SELECT COUNT(*)
		FROM (
		SELECT ROW_NUMBER() OVER (ORDER BY r.RISKKEY  desc ) AS cnt, r.RISKKEY AS RISKKEY , r.TITLE AS title, p.NAME AS prjname, TO_CHAR(r.WRITEDATE,'YYYY-MM-DD') AS writedates,
		TO_CHAR(r.COMDATE,'YYYY-MM-DD') AS comdate,r.IMPORTANCE AS IMPORTANCE , r.PROGRESS AS PROGRESS , m.NAME AS name, p.PROJECTKEY AS PROJECTKEY
		FROM RISK r , MEMBER m, PROJECT p  
		WHERE r.MEMBERKEY = m.MEMBERKEY 
		AND r.PROJECTKEY = p.PROJECTKEY
		order by cnt asc )
		where 1=1
		AND PROJECTKEY = #{projectkey}
	</select>
	
	<!-- 게시글 검색 -->
	<select id="schRiskList" parameterType="riskSch" resultType="risk">
	SELECT*
		FROM (
		SELECT ROW_NUMBER() OVER (ORDER BY r.RISKKEY  desc ) AS cnt, r.RISKKEY AS RISKKEY , r.TITLE AS title, p.NAME AS prjname, p.projectkey as schprjkey, TO_CHAR(r.WRITEDATE,'YYYY-MM-DD') AS writedates,
		TO_CHAR(r.COMDATE,'YYYY-MM-DD') AS comdate,r.IMPORTANCE AS IMPORTANCE , r.PROGRESS AS PROGRESS , m.NAME AS name
		FROM RISK r , MEMBER m, PROJECT p  
		WHERE r.MEMBERKEY = m.MEMBERKEY 
		AND r.PROJECTKEY = p.PROJECTKEY
		AND p.PROJECTKEY = #{schprjkey}
		order by cnt asc )
	where cnt BETWEEN #{start} AND #{end}*999
	AND title LIKE '%'||#{sch}||'%'
	OR name LIKE '%'||#{sch}||'%'
	OR PROGRESS LIKE '%'||#{sch}||'%'
	OR IMPORTANCE LIKE '%'||#{sch}||'%'
	OR prjname LIKE '%'||#{sch}||'%'
	OR writedates LIKE '%'||#{sch}||'%'
	OR comdate LIKE '%'||#{sch}||'%'
	order by cnt
	</select>

	<!-- 리스크 등록, 프로젝트 조회 -->
	<select id="selectprjlist" resultType="risk" parameterType="string">
		SELECT p.PROJECTKEY AS prjkey, p.NAME AS prjname
		FROM PROJECT p
		WHERE p.PROJECTKEY = #{projectkey}
	</select>
	
	<!-- 리스크 수정, 프로젝트 전체 조회 -->
	<select id="selectprjalllist" resultType="risk" parameterType="string">
		SELECT p.PROJECTKEY AS prjkey, p.NAME AS prjname
		FROM PROJECT p
	</select>
	
	<select id="riskboardlist" resultType="risk" parameterType="riskSch">
		SELECT*
		FROM (
			SELECT ROW_NUMBER() OVER (ORDER BY r.RISKKEY  desc ) AS cnt, r.RISKKEY AS RISKKEY , r.TITLE AS title, p.NAME AS prjname, TO_CHAR(r.WRITEDATE,'YYYY-MM-DD') AS writedates,
			TO_CHAR(r.COMDATE,'YYYY-MM-DD') AS comdate,r.IMPORTANCE AS IMPORTANCE , r.PROGRESS AS PROGRESS , m.NAME AS name
			FROM RISK r , MEMBER m, PROJECT p  
			WHERE r.MEMBERKEY = m.MEMBERKEY 
			AND r.PROJECTKEY = p.PROJECTKEY
			order by cnt asc )
		where cnt BETWEEN #{start} AND #{end}
		order by cnt
	</select>
	
	<!-- 리스크 프로젝트 별 리스트 조회 -->
	<select id="riskboardprlist" resultType="risk" parameterType="riskSch">
		SELECT*
		FROM (
			SELECT ROW_NUMBER() OVER (ORDER BY r.RISKKEY  desc ) AS cnt, r.RISKKEY AS RISKKEY , r.TITLE AS title, p.NAME AS prjname,
			TO_CHAR(r.WRITEDATE,'YYYY-MM-DD') AS writedates,
			TO_CHAR(r.COMDATE,'YYYY-MM-DD') AS comdate,r.IMPORTANCE AS IMPORTANCE , r.PROGRESS AS PROGRESS , m.NAME AS name
			FROM RISK r , MEMBER m, PROJECT p  
			WHERE r.MEMBERKEY = m.MEMBERKEY 
			AND r.PROJECTKEY = p.PROJECTKEY
			AND r.PROJECTKEY = #{projectkey}
			order by cnt asc )
		where cnt BETWEEN #{start} AND #{end}
		order by cnt
	</select>
	
	<!-- 리스크 게시글 조회 -->
	<select id="riskDetail" parameterType="int" resultType="risk">
		SELECT r.RISKKEY AS RISKKEY , r.TITLE AS title, p.NAME AS prjname,p.PROJECTKEY AS prjkey, TO_CHAR(r.WRITEDATE,'YYYY-MM-DD') AS writedates,
		TO_CHAR(r.COMDATE,'YYYY-MM-DD') AS comdate,r.IMPORTANCE AS IMPORTANCE , r.PROGRESS AS PROGRESS , m.NAME AS name , m.id as id
		, r.CONTENT AS CONTENT
		FROM RISK r, MEMBER m , PROJECT p 
		WHERE r.MEMBERKEY = m.MEMBERKEY 
		AND r.PROJECTKEY = p.PROJECTKEY
		AND RISKKEY = #{riskkey}
	</select>
	
	<!-- 댓글 조회 -->
		<select id="getCommList" resultType="rcomm" parameterType="int">
			SELECT  rownum cnt,LEVEL,rc.RCOMMENTKEY rcommkey, rc.COMMCONTENTS commcontent ,rc.COMMDATE commdate , m.NAME name, m.id id
					, rc.refno as refno
			FROM risk r, RISKCOMM rc , MEMBER m 
			WHERE rc.RISKKEY  = r.RISKKEY 
			AND rc.MEMBERKEY  = m.MEMBERKEY 
			AND r.RISKKEY  = #{riskkey}
			START WITH refno=0
			CONNECT BY PRIOR rc.RCOMMENTKEY  = rc.REFNO 
			ORDER siblings BY rc.RCOMMENTKEY DESC
		</select>
		
	<!-- 리스크 등록 -->
	<insert id="insertRisk" parameterType="risk">
		INSERT INTO risk VALUES (seq_risk.nextval,#{prjkey},(SELECT m.MEMBERKEY FROM MEMBER m WHERE id = #{id}),
			#{content},#{progress},sysdate,#{importance},#{title},to_date(#{comdate},'YYYY-MM-DD') )
	</insert>
	
	<!-- 댓글 등록 -->
	<insert id="insertcomm" parameterType="insrcomm">
		INSERT INTO RISKCOMM VALUES ((SELECT NVL(MAX(RCOMMENTKEY)+1,1) FROM RISKCOMM),
		(SELECT MEMBERKEY FROM member WHERE id = #{id}),#{commcontents},sysdate,#{riskkey},0)
	</insert>
	
	<!-- 답글 등록 -->
	<insert id="insertrecomm" parameterType="insrcomm">
		INSERT INTO RISKCOMM VALUES
		 ((SELECT NVL(MAX(RCOMMENTKEY)+1,1) FROM riskcomm),(SELECT memberkey FROM member WHERE id = #{id}),
		 #{recommcontents},sysdate,#{riskkey},#{refno})
	</insert>
	
	<!-- 리스크 삭제 -->
	<delete id="delRisk" parameterType="int">
		DELETE FROM RISK
		WHERE riskkey = #{riskkey}
	</delete>
	
	<!-- 댓글 삭제 -->
	<delete id="delcomm" parameterType="int">
		DELETE FROM riskcomm 
		WHERE rcommentkey = #{rcommkey}
		OR refno = #{rcommkey}
	</delete>
	
	<!--  답글 삭제 -->
	<delete id="delrecomm" parameterType="int">
		DELETE FROM riskcomm 
		where RCOMMENTKEY = #{rrecommkey}
	</delete>
	
	<!-- 리스크 수정 -->
	<update id="uptRisk" parameterType="risk">
		UPDATE risk SET
		PROJECTKEY = #{prjkey},
		CONTENT = #{content},
		PROGRESS = #{progress},
		IMPORTANCE = #{importance},
		TITLE = #{title},
		COMDATE = #{comdate}
		WHERE 
		RISKKEY = #{riskkey}
	</update>
	
	
</mapper>
