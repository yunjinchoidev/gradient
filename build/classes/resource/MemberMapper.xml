<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="project5.member.MemberDao">






	<!-- 전체 데이터 수 가져오기 -->
	<select id="totCnt" parameterType="project5.member.MemberSch"
		resultType="int">
		select count(*)
		from member
		where 1=1
		<if test="name!=null and name!=''">
			and name like '%'||#{name}||'%'
		</if>
		<if test="email!=null and email!=''">
			and email like '%'||#{email}||'%'
		</if>
	</select>



	<!-- 리스트를 불러오기 -->
	<select id="listWithPaging"
		resultType="project5.member.MemberVO"
		parameterType="project5.member.MemberSch">
		select *
		from (
		select rownum cnt,m.*
		from member m
		where 1=1
		and rownum <![CDATA[<]]>
		#{end}
		ORDER BY memberkey ASC
		<if test="name!=null and name!=''">
			and name like '%'||#{name}||'%'
		</if>
		<if test="email!=null and email!=''">
			and email like '%'||#{email}||'%'
		</if>
		)
		where cnt <![CDATA[>]]>
		#{start}
		order by memberkey
	</select>


	<!-- 리스트를 불러오기 -->
	<select id="listWithPaging2"
		resultType="project5.member.MemberVO"
		parameterType="project5.member.MemberSch">
		select *
		from (
		select rownum cnt,m.*
		from member m
		where 1=1
		and email !=
		'미입력'
		and rownum <![CDATA[<]]>
		#{end}
		ORDER BY memberkey ASC
		<if test="name!=null and name!=''">
			and name like '%'||#{name}||'%'
		</if>
		<if test="email!=null and email!=''">
			and email like '%'||#{email}||'%'
		</if>
		)
		where cnt <![CDATA[>]]>
		#{start}
		order by memberkey
	</select>


	<!-- 리스트를 불러오기 -->
	<select id="listWithPaging3"
		resultType="project5.member.MemberVO"
		parameterType="project5.member.MemberSch">
		select *
		from (
		select rownum cnt,m.*
		from member m
		where 1=1
		and status !=
		0
		and rownum <![CDATA[<]]>
		#{end}
		ORDER BY memberkey ASC
		<if test="name!=null and name!=''">
			and name like '%'||#{name}||'%'
		</if>
		<if test="email!=null and email!=''">
			and email like '%'||#{email}||'%'
		</if>
		)
		where cnt <![CDATA[>]]>
		#{start}
		order by memberkey
	</select>

	<!-- 전체 데이터 수 가져오기 -->
	<select id="totCnt2" parameterType="project5.member.MemberSch"
		resultType="int">
		select count(*)
		from member
		where 1=1
		and email != '미입력'
		<if test="name!=null and name!=''">
			and name like '%'||#{name}||'%'
		</if>
		<if test="email!=null and email!=''">
			and email like '%'||#{email}||'%'
		</if>
	</select>
	<!-- 전체 데이터 수 가져오기 -->
	<select id="totCnt3" parameterType="project5.member.MemberSch"
		resultType="int">
		select count(*)
		from member
		where 1=1
		and status != 0
		<if test="name!=null and name!=''">
			and name like '%'||#{name}||'%'
		</if>
		<if test="email!=null and email!=''">
			and email like '%'||#{email}||'%'
		</if>
	</select>




	<select id="list" resultType="project5.member.MemberVO">
		select *
		from member
		order by
		memberkey
	</select>


















	<insert id="edit" parameterType="project5.member.MemberVO">
		update member set
		id=#{id},
		pass=#{pass},
		name=#{name},
		auth=#{auth},
		deptno=#{deptno},
		email=#{email}
		where
		memberkey=#{memberkey}
	</insert>

	<select id="reginum" resultType="int">
		SELECT seq_memberregi.nextval
		FROM dual
	</select>

	<select id="reginumCurrvalAjax" resultType="int">
		SELECT
		seq_memberregi.currval
		FROM dual
	</select>


	<select id="get" resultType="project5.member.MemberVO">
		select * from member where
		memberkey=#{memberkey}
	</select>






	<select id="login" resultType="project5.member.MemberVO"
		parameterType="project5.member.MemberVO">
		select *
		from member
		where id=#{id} and pass=#{pass}
	</select>

	<select id="logout" resultType="project5.member.MemberVO">
		select *
		from member
		where
		id='4d3c2b1a'
	</select>

	<select id="delete">
		delete
		from member
		where memberkey=#{memberkey}
	</select>















	<resultMap type="project5.member.MemberVO" id="memberMap">
		<id property="memberkey" column="memberkey" />
		<result property="id" column="id" />
		<result property="pass" column="pass" />
		<result property="email" column="email" />
		<collection property="authList" resultMap="authMap">
		</collection>
	</resultMap>

	<resultMap type="project5.member.AuthVO" id="authMap">
		<result property="memberkey" column="memberkey" />
		<result property="auth" column="auth" />
	</resultMap>


	<select id="read" resultMap="memberMap" parameterType="String">
		SELECT
		m.memberkey, m.id, m.pass,
		m.email, auth.auth
		FROM
		member m LEFT OUTER
		JOIN auth auth on m.memberkey
		= auth.memberkey
		WHERE m.id
		=#{id}
	</select>




	<update id="memberRegisterApply"
		parameterType="project5.member.MemberVO">
		update member
		set status = 1,
		email = #{email},
		auth =
		#{auth},
		name= #{name}
		where memberkey=#{memberkey}
	</update>

	<update id="memberRegisterComplete"
		parameterType="project5.member.MemberVO">
		update member
		set status = 2
		where memberkey=#{memberkey}
	</update>





	<select id="memberIdFind"
		parameterType="project5.member.MemberVO" resultType="String">
		select id
		from
		member
		where name=#{name}
		and email=#{email}
	</select>

	<select id="memberPassFind"
		parameterType="project5.member.MemberVO"
		resultType="project5.member.MemberVO">
		select *
		from
		member
		where name=#{name}
		and id=#{id}
		and
		email=#{email}
	</select>




	<select id="newIssuePassword"
		parameterType="project5.member.MemberVO">
		UPDATE MEMBER
		SET
		pass =
		'newissuedpassword'||seq_memberpass.nextval
		WHERE name=#{name}
		and
		id=#{id}
		and email=#{email}
	</select>


	<select id="getByNameAndEmail"
		parameterType="project5.member.MemberVO"
		resultType="project5.member.MemberVO">
		select *
		from
		member
		where name=#{name}
		and email=#{email}
	</select>


	<update id="updateVisitCnt"
		parameterType="project5.member.MemberVO">
		update member
		set visitcnt = visitcnt+1
		where memberkey =
		#{memberkey}
	</update>

	<update id="updatePricing"
		parameterType="project5.member.MemberVO">
		update member
		set pricing= #{pricing}
		where memberkey =
		#{memberkey}
	</update>


	<insert id="insertMemberAjax"
		parameterType="project5.member.MemberVO">
		insert into member (memberkey, name, email, id, pass)
		values
		(seq_member.nextval, #{name}, #{email},
		seq_member.nextval||'apiID', seq_member.nextval||'apiPass')
	</insert>


	<update id="updateStatus"
		parameterType="project5.member.MemberVO">
		UPDATE MEMBER
		SET
		status=#{status}
		WHERE
		memberkey=#{memberkey}
	</update>


	<select id="duplicateEmail"
		resultType="project5.member.MemberVO" parameterType="String">
		select *
		from
		member
		where email=#{email}
	</select>


	<select id="duplicateId" resultType="project5.member.MemberVO"
		parameterType="String">
		select id
		from member
		where id=#{id}
	</select>



	<select id="apiLogin" parameterType="project5.member.MemberVO"
		resultType="project5.member.MemberVO">
		select * from
		member
		where name=#{name}
		and email=#{email}
	</select>


	<select id="visitCount1" resultType="int">
		SELECT count(*) count FROM
		MEMBER
		WHERE VISITCNT BETWEEN 1 AND 100
	</select>

	<select id="visitCount2" resultType="int">
		SELECT count(*) count FROM
		MEMBER
		WHERE VISITCNT BETWEEN 101 AND 300
	</select>

	<select id="visitCount3" resultType="int">
		SELECT count(*) count FROM
		MEMBER
		WHERE VISITCNT BETWEEN 301 AND 1000
	</select>

	<select id="visitCount4" resultType="int">
		SELECT count(*) count FROM MEMBER WHERE VISITCNT <![CDATA[>]]>
		1001
	</select>

	<select id="authCount" resultType="project5.member.MemberVO">
		SELECT count(*) count, auth
		FROM MEMBER WHERE email!='미입력' GROUP BY auth
	</select>











</mapper>
